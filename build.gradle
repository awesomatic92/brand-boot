// 나의 그레이들 설정 (세미콜론은 안붙여도 된다.) 		singer's build.gradle
ext {
	springVersion = '4.3.22.RELEASE'
}

group 'com.oraclejava'			// 단체명 ex) com.samsung, com.lg
version '1.0-SNAPSHOT'			// 버전 임의의 숫자 가능

apply plugin: 'java'			// 자바 프로젝트로 인식되게 함

sourceCompatibility = 1.8		// 원하는 자바 버전에 맞춤(jdk8 버전 이상)

repositories {
	mavenCentral()				// 메이븐 리포지토리에서 라이브러리를 받아 오겠다는 뜻!
}

dependencies {
	// https://mvnrepository.com/artifact/org.springframework/spring-context
	//compile group: 'org.springframework', name: 'spring-context', version: '4.3.22.RELEASE'				// Spring context 다운로드
	compile "org.springframework:spring-context:$springVersion"
}
/////////////////////////////////////////////////////////
buildscript {
	ext {
		springBootVersion = "2.3.6.RELEASE"
	}
	
	repositories {
		jcenter()						// mavenCentral()과 기능적으로 유사하나, 좀 더 상위 호환 가능(SpringBoot Library 사용을 위해)
	}
	
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		}
		
}

apply plugin: "org.springframework.boot"
apply plugin: "war"

dependencies {
	compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
	providedCompile "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
	
	// guava : google에서 만든 자바 라이브러리(유용함)
	compile "com.google.guava:guava:22.0"
	
	// oracle jdbc driver
	// https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8
	compile "com.oracle.ojdbc:ojdbc8:19.3.0.0"
	
	// jaxb -> BuildShip에서 springboot부분이 jaxb로 되어있는데, java9부터 라이브러리에서 사라져서 임의로 추가해준다.
	compile "javax.xml.bind:jaxb-api:2.3.0"
	
	// bootstrap, jquery 라이브러리 -> webjar
	compile "org.webjars:bootstrap:3.3.7-1"
	compile "org.webjars:jquery:3.2.1"
	
	// javax.validation
	compile "javax.validation:validation-api:2.0.1.Final"	

	//dev tools(war로 배포하기 전에 주석처리해놓음)
	compile "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
	
	//query dsl
	compile "com.querydsl:querydsl-apt:4.2.1"
	compile "com.querydsl:querydsl-sql:4.2.1"
	compile "com.querydsl:querydsl-sql-spring:4.2.1"
	compile "com.querydsl:querydsl-jpa:4.2.1"
	
	annotationProcessor (
		"com.querydsl:querydsl-apt:4.2.1:jpa"
		, "javax.annotation:javax.annotation-api:1.3.2"
         , "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final"
	)
	
	implementation 'org.jsoup:jsoup:1.13.1'
	
	
}

sourceSets {
	generated
}

sourceSets.generated.java.srcDirs = ['build/classes/java/main']
configurations {
	querydslapt
}


def queryDslOutput = file("./build/generated/sources/annotationProcessor/java/main")
sourceSets {
	main {
		java {
			srcDir queryDslOutput
		}
	}
}

/*
task generatedQueryDSL(type: JavaCompile, group: 'build') {
	source = sourceSets.main.java
	classpath = configurations.compile
	destinationDir = queryDslOutput
	options.compilerArgs = [
		"-proc:only",
		"-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
	]
}
compileJava.dependsOn(generatedQueryDSL);
*/

clean {
	delete queryDslOutput
}

war {
	archiveName("brand-boot.war")
}
